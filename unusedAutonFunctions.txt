
	void AutonSevenFrisbeeBack(void)
	{
		
		frisbeeShooter.ShootFrisbee(false);//Service the shooter to retract the firing piston
		switch (autonStepCount)
		{

		case 0:
			if (autonReset == true)
			{
				autonDrivingForward.Reset();
				autonDrivingForward.Start();
			}
			//Drive forward slowly to detatch from bar
			frisbeeShooter.SetPower(POWER_AUTONOMOUS_SHOTS);
			
			if (autonDrivingForward.Get() > TIME_AUTONOMOUS_SPIN_UP)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 1: 	//Shoot 3 frisbees (3sec) and lower collector
			if (AutonomousShoot(3,true,autonReset, 1.5))
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 2:
			if ((AutonomousDislodgeCollector(TIME_AUTONOMOUS_DISLODGE, autonReset) == true) && 
				(AutonomousLowerCollector() == true))
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 3: 		//Drive forward and collect
			if (AutonomousCollectForward(999.0,1.0,true,autonReset)== true)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
	
			break;
		case 4:	//Load frisbees
			myRobot.Drive(0.0,0.0);
			if (AutonomousLoadFrisbees(true,autonReset))
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 5:	//Drive back and lower collector
			if (AutonomousCollectBack(999.0,1.80,true,autonReset) == true)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 6:	//Stop motor and begin loading
			myRobot.Drive(0.0,0.0);
			AutonomousLoadFrisbees(true,autonReset);
			if (autonLoading.Get() > 0.5)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 7:
			//Load and Drive Forward without collecting
			
			if (AutonomousCollectForward(999.0,1.8,false,autonReset) && AutonomousLoadFrisbees(true,false))
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 8:
			//Shoot 4 frisbees (4 seconds)
			if (AutonomousShoot(4,true,autonReset, 1.5))
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 9:
			driverStationLCD->PrintfLine((DriverStationLCD::Line) 3, "Time:%f", timeInAutonomous.Get());
			timeInAutonomous.Stop();
			autonReset = true;
			autonStepCount++;
			break;
		case 10:
			autonReset = true;
			break;
		}
	}
	
	
	
	
	
	void AutonNineFrisbeeCrazy(void)
		{
			bool condition1, condition2;
			frisbeeShooter.ShootFrisbee(false);//Service the shooter to retract the firing piston
			switch (autonStepCount)
			{
			case 0:
				//TODO determine rpm
				frisbeeShooter.SetRpm(RPM_AUTONOMOUS_SHOTS);
				if (autonReset)
				{
					autonDrivingForward.Reset();
					autonDrivingForward.Start();
				}
				myRobot.Drive(0.0,0.0);
				if (autonDrivingForward.Get() >=  0.2)
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 1: 	//Shoot 3 frisbees (3sec) and lower collector

				//TODO condition1 = AutonomousDislodgeCollector(TIME_AUTONOMOUS_DISLODGE, autonReset); 
				condition2 = AutonomousShoot(3,false,autonReset);
				if (condition2)
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 2:
				condition1 = AutonomousDislodgeCollector(TIME_AUTONOMOUS_DISLODGE, autonReset);
				if (condition1)condition2 = collector.Lower();
				if (condition1 && condition2)
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 3: 		//Drive forward and collect
				if (AutonomousCollectForward(999.0,1.25,true,autonReset)== true)
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
		
				break;
			case 4:	//Load frisbees
				myRobot.Drive(0.20 + autonSpeedCorrect,-autonTurnAmount);
				if (AutonomousLoadFrisbees(true,autonReset,1.5) )
				{
					if (AutonomousLowerCollector())
					{
						autonReset = true;
						autonStepCount++;
					}
				}
				else
				{
					autonReset = false;
				}
				break;
			case 5:	//Drive forward and lower collector
				if (AutonomousCollectForward(999.0,0.65,true,autonReset) == true)
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 6:	//Stop motor and begin loading
				myRobot.Drive(0.0,0.0);
				AutonomousLoadFrisbees(true,autonReset);
				if (autonLoading.Get() > 0.15)
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 7:
				//Load and Drive Backward without collecting
				AutonomousCollectBackReallyFast(999.0,3.75,false,autonReset);
				
				if (AutonomousLoadFrisbees(true,false, 1.5))
				{
					collector.Lower();
				}
				if (autonDrivingBack.Get() > 1.5)
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 8:
				//Shoot 2 while driving (like a boss)

				AutonomousCollectBackReallyFast(999.0,3.75,false,false);
				if (AutonomousShoot(2,true,autonReset))
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 9:

				if (AutonomousCollectBackReallyFast(999.0,3.75,true, false))
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 10:
				condition1 = AutonomousLoadFrisbees(false, autonReset, 1.5);
				condition2 = AutonomousShoot(2,false,autonReset);
				if (condition1 && condition2)
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 11:
				if (AutonomousShoot(2,false,autonReset))
				{
					autonReset = true;
					autonStepCount++;
				}
				else
				{
					autonReset = false;
				}
				break;
			case 12:
				driverStationLCD->PrintfLine((DriverStationLCD::Line) 3, "Time: %f", timeInAutonomous.Get());
				timeInAutonomous.Stop();
				autonReset = true;
				autonStepCount++;
				break;
			case 13:
				autonReset = true;
				break;
					
			}
					
		}	
	
	
	void AutonSevenFrisbeeForwardWithLifters(void)
	{
		bool condition1, condition2;
		frisbeeShooter.ShootFrisbee(false);//Service the shooter to retract the firing piston
		switch (autonStepCount)
		{
		case 0:
			frisbeeShooter.SetRpm(RPM_AUTONOMOUS_SHOTS);
			if (autonReset)
			{
				autonDrivingForward.Reset();
				autonDrivingForward.Start();
			}
			myRobot.Drive(0.0,0.0);
			if (autonDrivingForward.Get() >=  0.2)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 1: 	//Shoot 3 frisbees (3sec) and lower collector
			if (AutonomousShoot(3,false,autonReset))
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 2:
			condition1 = AutonomousDislodgeCollector(TIME_AUTONOMOUS_DISLODGE, autonReset); 
			condition2 = AutonomousLowerCollector();
			if (condition1 && condition2)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 3: 		//Drive forward and collect
			if (AutonomousCollectForward(999.0,1.1,true,autonReset)== true)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
	
			break;
		case 4:	//Load frisbees
			myRobot.Drive(0.20 + autonSpeedCorrect,-autonTurnAmount);
			if (AutonomousLoadFrisbees(true,autonReset,2.0) )
			{
				if (AutonomousLowerCollector())
				{
					autonReset = true;
					autonStepCount++;
				}
			}
			else
			{
				autonReset = false;
			}
			break;
		case 5:	//Drive forward and lower collector
			if (AutonomousCollectForward(999.0,0.65,true,autonReset) == true)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 6:	//Stop motor and begin loading
			myRobot.Drive(0.0,0.0);
			AutonomousLoadFrisbees(true,autonReset);
			if (autonLoading.Get() > 0.25)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 7:
			//Load and Drive Backward without collecting
			condition1 = AutonomousCollectBack(999.0,1.8,false,autonReset);
			condition2 = AutonomousLoadFrisbees(true,false, 1.5);
			if (condition1 && condition2)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 8:
			if (autonReset)
			{
				autonDrivingForward.Reset();
				autonDrivingForward.Start();
			}
			//tilt up to shoot frisbees
			robotLifterExtend.Set(true);
			robotLifterRetract.Set(false);
			if (autonDrivingForward.Get() < 0.5)
			{
				AUTON_STRAIGHTEN();
			}
			else
			{
				myRobot.Drive(0.0,0.0);
			}
			
			if (autonDrivingForward.Get() >=  1.0)
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 9:
			//Shoot 4 frisbees (4 seconds)
			if (AutonomousShoot(8,true,autonReset))
			{
				autonReset = true;
				autonStepCount++;
			}
			else
			{
				autonReset = false;
			}
			break;
		case 10:

			robotLifterExtend.Set(false);
			robotLifterRetract.Set(true);
			driverStationLCD->PrintfLine((DriverStationLCD::Line) 3, "Time: %f", timeInAutonomous.Get());
			timeInAutonomous.Stop();
			autonReset = true;
			autonStepCount++;
			break;
		case 11:
			autonReset = true;
			break;
				
		}
				
	}
	